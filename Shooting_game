import pygame
import sys
from time import sleep #일시정지 기능
import random

windowwidth = 480           #게임창의 가로 크기
windowheight = 640          #게임창의 세로 크기
rockImage = ['rock01.png','rock02.png','rock03.png','rock04.png','rock05.png',
             'rock06.png','rock07.png','rock08.png','rock09.png','rock10.png',
             'rock11.png','rock12.png','rock13.png','rock14.png','rock15.png',
             'rock16.png','rock17.png','rock18.png','rock19.png','rock20.png',
             'rock21.png','rock22.png','rock23.png','rock24.png','rock25.png',
             'rock26.png','rock27.png','rock28.png','rock29.png','rock30.png',] #떨어지는 운석 이미지
explosionSound = ['explosion01.wav','explosion02.wav','explosion03.wav','explosion04.wav'] # 폭발음


def writeScore(count):              #점수 표시판
    global gamePad
    font = pygame.font.Font('NanumGothic.ttf',20)
    text = font.render('파괴한 운석수: '+ str(count), True,(255,255,255))
    gamePad.blit(text,(10,0))

def writePassed(count):             #남은 목숨 표시판
    global gamePad
    font = pygame.font.Font('NanumGothic.ttf',20)
    text = font.render('놓친 운석수: '+ str(count)+ '/3', True,(255,0,0))
    gamePad.blit(text,(330,0))

def writeMSG(text):                 #게임오버 출력판
    global gamePad, gameOverSound
    textfont = pygame.font.Font('NanumGothic.ttf',40)
    text = textfont.render(text, True,(255,0,0))
    textpos = text.get_rect()
    textpos.center = (windowwidth/2 , windowwidth/2) # 정중앙을 뜻함
    gamePad.blit(text,textpos)
    pygame.display.update()         #처음 화면을 출력
    pygame.mixer.music.stop()       #배경음악 중지
    gameOverSound.play()            #게임오버 음성 안내
    sleep(4)                        #4초 대기
    pygame.mixer.music.play(-1)     #다시 게임음악 실행
    runGame()                       #게임 재시작

def crash():   # 전투기와 운석이 충돌시
    global gamePad
    writeMSG('전투기 파괴됨!')

def gameOver():
    global gamePad
    writeMSG('지구가 멸망했슴다...')

def drawObject(obj,x,y):   # 배경같은 객채를 그리는 함수
    global gamePad
    gamePad.blit(obj,(x,y))     #비트연산으로 해당좌표에 해당 오브젝트를 그려라라

def initGame():             #게임 초기화
    global gamePad, clock, background, fighter, missile, explosion, missileSound, gameOverSound
    pygame.init() # 파이 게임 초기화
    gamePad = pygame.display.set_mode((windowwidth,windowheight)) #게임창 크기조절
    pygame.display.set_caption('shooting_game')                   # 제목
    background = pygame.image.load('background.png')              # 배경 이미지 불러오기
    fighter = pygame.image.load('fighter.png')                    # 전투기 이미지 가져오기
    missile = pygame.image.load('missile.png')                    #미사일 이미지 가져오기
    clock = pygame.time.Clock()                                   # 시계
    explosion = pygame.image.load('explosion.png')                # 폭발 이미지 가져오기
    pygame.mixer.music.load('music.wav')                          # 배경음악 가져오기
    pygame.mixer.music.play(-1)
    missileSound = pygame.mixer.Sound('missile.wav')              # 미사일 발사 소리
    gameOverSound = pygame.mixer.Sound('gameover.wav')            # 게임 오버 소리


def runGame():
    global gamePad, clock, background, fighter, explosion, missileSound

    fighterSize= fighter.get_rect().size                          # 전투기 이미지의 실제 너비 가져와서 변수로 만듬
    fighterWidth = fighterSize[0]
    fighterHeight = fighterSize[1]

    x = windowwidth * 0.45                                      # 전투기 첫출현시 x좌표
    y = windowheight * 0.9                                      # 전투기 첫출현시 y좌표
    fighterX = 0                                                # 전투기 위치 좌표 초기화

    missileXY = []                                              # 미사일들의 좌표를 담아두는 리스트

    rock = pygame.image.load(random.choice(rockImage))          #운석을 랜덤하게 불러옴
    rockSize = rock.get_rect().size                             # 운석이미지 크기 가져오기
    rockwidth = rockSize[0]
    rockheight = rockSize[1]
    destorySound = pygame.mixer.Sound(random.choice(explosionSound))

    rockX =random.randrange(0, windowwidth-rockwidth)            # 운석의 좌우 출현 랜덤화
    rockY = 0                                                    # 운석의 출현 높이는 최상단으로 고정
    rockspeed = 2                                                # 운석의 속도

    isShot = False            #미사일이 운석에 맞았을때
    shotCount = 0             #발사 횟수
    rockPassed = 0            #놓친 운석의 수

    onGame = False
    while not onGame:
        for event in pygame.event.get():
            if event.type in [pygame.QUIT]:
                pygame.quit()
                sys.exit()
            # 전투기 조종 + 미사일 발사 관련 코드
            if event.type in [pygame.KEYDOWN]:
                if event.key == pygame.K_LEFT:
                    fighterX -= 5

                elif event.key == pygame.K_RIGHT:
                    fighterX += 5

            # 위아래는 움직일 필요없어서 빼버렸지만 만들려면 fighterY 변수 추가후 해당 키입력에 대입

                elif event.key == pygame.K_SPACE:
                    missileSound.play()
                    missileX = x + fighterWidth /2
                    missileY = y - fighterHeight
                    missileXY.append([missileX,missileY])

            if event.type in [pygame.KEYUP]:  # 방향키를 때면 이동 중단
                if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                    fighterX = 0

        drawObject(background, 0, 0)  # 화면을 배경이미지로 채워라
        x += fighterX

        if x < 0 :   # 왼쪽 시작점이 0이므로 이 코드는 전투기의 좌표가 왼쪽벽을 넘을 수 없게 함
            x = 0
        elif x > windowwidth - fighterWidth: # 오른쪽 벽
            x = windowwidth - fighterWidth

        if y < rockY + rockheight:          # 운석과 전투기의 충돌 체크
            if(rockX > x and rockX < x + fighterWidth) or \
              (rockX+ rockwidth > x and rockX + rockwidth < x +fighterWidth): # 운석 좌표가 벽을 넘지 않았으면서 전투기에 닿으면 crash 함수 실행
                crash()

        drawObject(fighter ,x ,y) # 전투기를 그려라

        if len(missileXY) !=0:                              #미사일의 좌표가 0이아니면 = 발사가 됐으면
            for i,bxy in enumerate(missileXY):              #미사일 요소에 대하여 반복
                bxy[1] -= 10                                # 10의 속도로 상승해라
                missileXY[i][1] = bxy[1]

                if bxy[1] < rockY:                                     # 운석 명중시 실행될 코드
                    if bxy[0] > rockX and bxy[0] < rockX +rockwidth :  # 미사일의 좌표가 운석의 좌표와 곂치면
                        missileXY.remove(bxy)                          # 명중한 미사일 삭제
                        isShot = True                                  #명중 판정은 참이된다.
                        shotCount +=1                                  #명중 횟수 1 증가


                if bxy[1] <= 0:                         #미사일의 좌표가 끝에 도달하면
                    try:
                        missileXY.remove(bxy)           #해당 미사일을 삭제해라
                    except:                             #만약 오류가 나도 무시
                        pass

        if len(missileXY) != 0:                     #미사일의 좌표가 0이아니면 = 발사가 됐으면
            for bx,by in missileXY:
                drawObject(missile, bx ,by)         #해당 좌표에 미사일을 계속 그려라

        writeScore(shotCount)                       #점수표시판에 명중횟수를 표시해라

        rockY +=rockspeed                           # 운석 속도를 위한 변수

        if rockY > windowheight:                    #운석이 가장 바닥에 닿으면
            rock = pygame.image.load(random.choice(rockImage))  # 새로운 운석을 랜덤하게 불러옴
            rockSize = rock.get_rect().size  # 운석이미지 크기 가져오기
            rockwidth = rockSize[0]
            rockheight = rockSize[1]
            rockX = random.randrange(0, windowwidth - rockwidth)  # 운석의 좌우 출현 랜덤화
            rockY = 0                                             # 운성은 항상 꼭대기에서 출현
            rockPassed +=1                                        # 놓친 운석수 카운트 1증가

        if rockPassed == 3:                                    #놓친 운석수가 3이 되면
            gameOver()                                         # 게임 오버

        writePassed(rockPassed)                                 #놓친 운석수 = 남은 목숨수를 표시하는 함수 실행


        if isShot == True:                                      #명중 판정 발생시
            destorySound.play()                                 #파괴 효과음 재상
            drawObject(explosion,rockX,rockY)                   #폭발 이펙트 표현

            rock = pygame.image.load(random.choice(rockImage))  # 새로운 운석 출현 시키기
            rockSize = rock.get_rect().size                     # 운석이미지 크기 가져오기
            rockwidth = rockSize[0]
            rockheight = rockSize[1]
            rockX = random.randrange(0, windowwidth - rockwidth)  # 운석의 좌우 출현 랜덤화
            rockY = 0
            destorySound = pygame.mixer.Sound(random.choice(explosionSound))

            isShot = False                                      # 명중 판정 다시 초기화

            rockspeed += 0.2                                    # 운석 속도 0.2만큼 증가
            if rockspeed >= 10:                                 # 운석 속도가 10이상되면
                rockspeed = 10                                  # 10으로 고정 (난이도 조절용)


        drawObject(rock,rockX,rockY)        #운석을 그려라

        pygame.display.update() # 새로운 화면을 시작할거다

        clock.tick(60) #화면은 초당 60 프레임

    pygame.quit()

initGame()
runGame()
